# =============================================================================
# TouriQuest Development Environment - FIXED VERSION
# =============================================================================


services:
  # =============================================================================
  # DATABASES
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: touriquest-postgres-dev
    environment:
      POSTGRES_DB: touriquest_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - touriquest-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: touriquest-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf
    command: redis-server /etc/redis/redis.conf
    networks:
      - touriquest-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Elasticsearch for search
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: touriquest-elasticsearch-dev
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - touriquest-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # MESSAGE QUEUE
  # =============================================================================
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: touriquest-rabbitmq-dev
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - touriquest-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # MONITORING & OBSERVABILITY
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: touriquest-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - touriquest-network

  grafana:
    image: grafana/grafana:latest
    container_name: touriquest-grafana-dev
    ports:
      - "3001:3000"  # Changed from 3000 to avoid conflict with frontend
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - touriquest-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: touriquest-jaeger-dev
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - touriquest-network

  # =============================================================================
  # DEVELOPMENT SERVICES
  # =============================================================================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: touriquest-mailhog-dev
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - touriquest-network

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: touriquest-minio-dev
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - touriquest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # =============================================================================
  # APPLICATION SERVICES (BACKEND MICROSERVICES)
  # =============================================================================
  
  # API Gateway - Entry point for all requests
  api-gateway:
    build:
      context: ./touriquest-backend/services/api-gateway
      dockerfile: Dockerfile.dev
    container_name: touriquest-api-gateway-dev
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/touriquest_dev
      - REDIS_URL=redis://redis:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
      - JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production
      - LOG_LEVEL=DEBUG
      - DEBUG=true
    volumes:
      - ./touriquest-backend/services/api-gateway:/app
      - ./shared:/app/shared
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - touriquest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Authentication Service
  auth-service:
    build:
      context: ./touriquest-backend/services/auth-service
      dockerfile: Dockerfile.dev
    container_name: touriquest-auth-service-dev
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/touriquest_dev
      - REDIS_URL=redis://redis:6379/1
      - JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRE_MINUTES=30
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
      - LOG_LEVEL=DEBUG
      - DEBUG=true
    volumes:
      - ./touriquest-backend/services/auth-service:/app
      - ./shared:/app/shared
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - touriquest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  
  # Property Management Service
  property-service:
    build:
      context: ./touriquest-backend/services/property-service
      dockerfile: Dockerfile.dev
    container_name: touriquest-property-service-dev
    ports:
      - "8003:8003"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/touriquest_dev
      - REDIS_URL=redis://redis:6379/3
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_SECURE=false
      - LOG_LEVEL=DEBUG
      - DEBUG=true
    volumes:
      - ./touriquest-backend/services/property-service:/app
      - ./shared:/app/shared
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - touriquest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Points of Interest Service
  poi-service:
    build:
      context: ./touriquest-backend/services/poi-service
      dockerfile: Dockerfile.dev
    container_name: touriquest-poi-service-dev
    ports:
      - "8004:8004"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/touriquest_dev
      - REDIS_URL=redis://redis:6379/4
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_SECURE=false
      - LOG_LEVEL=DEBUG
      - DEBUG=true
    volumes:
      - ./touriquest-backend/services/poi-service:/app
      - ./shared:/app/shared
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - touriquest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Booking Management Service
  booking-service:
    build:
      context: ./touriquest-backend/services/booking-service
      dockerfile: Dockerfile.dev
    container_name: touriquest-booking-service-dev
    ports:
      - "8005:8005"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/touriquest_dev
      - REDIS_URL=redis://redis:6379/5
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
      - STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
      - STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key
      - STRIPE_WEBHOOK_SECRET=whsec_test_webhook_secret
      - LOG_LEVEL=DEBUG
      - DEBUG=true
    volumes:
      - ./touriquest-backend/services/booking-service:/app
      - ./shared:/app/shared
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - touriquest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Experience Management Service
  experience-service:
    build:
      context: ./touriquest-backend/services/experience-service
      dockerfile: Dockerfile.dev
    container_name: touriquest-experience-service-dev
    ports:
      - "8006:8006"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/touriquest_dev
      - REDIS_URL=redis://redis:6379/6
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_SECURE=false
      - LOG_LEVEL=DEBUG
      - DEBUG=true
    volumes:
      - ./touriquest-backend/services/experience-service:/app
      - ./shared:/app/shared
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - touriquest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI & Recommendation Service
  ai-service:
    build:
      context: ./touriquest-backend/services/ai-service
      dockerfile: Dockerfile.dev
    container_name: touriquest-ai-service-dev
    ports:
      - "8007:8007"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/touriquest_dev
      - REDIS_URL=redis://redis:6379/7
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
      - OPENAI_API_KEY=your_openai_api_key_here
      - ANTHROPIC_API_KEY=your_anthropic_api_key_here
      - HUGGINGFACE_API_KEY=your_huggingface_api_key_here
      - LOG_LEVEL=DEBUG
      - DEBUG=true
    volumes:
      - ./touriquest-backend/services/ai-service:/app
      - ./shared:/app/shared
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - touriquest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Media Management Service
  media-service:
    build:
      context: ./touriquest-backend/services/media-service
      dockerfile: Dockerfile.dev
    container_name: touriquest-media-service-dev
    ports:
      - "8008:8008"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/touriquest_dev
      - REDIS_URL=redis://redis:6379/8
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_SECURE=false
      - CLOUDINARY_CLOUD_NAME=your_cloudinary_cloud_name
      - CLOUDINARY_API_KEY=your_cloudinary_api_key
      - CLOUDINARY_API_SECRET=your_cloudinary_api_secret
      - LOG_LEVEL=DEBUG
      - DEBUG=true
    volumes:
      - ./touriquest-backend/services/media-service:/app
      - ./shared:/app/shared
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - touriquest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service
  notification-service:
    build:
      context: ./touriquest-backend/services/notification-service
      dockerfile: Dockerfile.dev
    container_name: touriquest-notification-service-dev
    ports:
      - "8009:8009"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/touriquest_dev
      - REDIS_URL=redis://redis:6379/9
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
      - SMTP_USER=test@touriquest.com
      - SMTP_PASSWORD=test_password
      - TWILIO_ACCOUNT_SID=your_twilio_account_sid
      - TWILIO_AUTH_TOKEN=your_twilio_auth_token
      - FIREBASE_CREDENTIALS=your_firebase_credentials_json
      - LOG_LEVEL=DEBUG
      - DEBUG=true
    volumes:
      - ./touriquest-backend/services/notification-service:/app
      - ./shared:/app/shared
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mailhog:
        condition: service_started
    networks:
      - touriquest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Analytics Service
  analytics-service:
    build:
      context: ./touriquest-backend/services/analytics-service
      dockerfile: Dockerfile.dev
    container_name: touriquest-analytics-service-dev
    ports:
      - "8010:8010"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/touriquest_dev
      - REDIS_URL=redis://redis:6379/10
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
      - LOG_LEVEL=DEBUG
      - DEBUG=true
    volumes:
      - ./touriquest-backend/services/analytics-service:/app
      - ./shared:/app/shared
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - touriquest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Service
  admin-service:
    build:
      context: ./touriquest-backend/services/admin-service
      dockerfile: Dockerfile.dev
    container_name: touriquest-admin-service-dev
    ports:
      - "8011:8011"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/touriquest_dev
      - REDIS_URL=redis://redis:6379/11
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
      - LOG_LEVEL=DEBUG
      - DEBUG=true
    volumes:
      - ./touriquest-backend/services/admin-service:/app
      - ./shared:/app/shared
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - touriquest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8011/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Communication Service
  communication-service:
    build:
      context: ./touriquest-backend/services/communication-service
      dockerfile: Dockerfile.dev
    container_name: touriquest-communication-service-dev
    ports:
      - "8012:8012"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/touriquest_dev
      - REDIS_URL=redis://redis:6379/12
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
      - LOG_LEVEL=DEBUG
      - DEBUG=true
    volumes:
      - ./touriquest-backend/services/communication-service:/app
      - ./shared:/app/shared
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - touriquest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8012/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Integration Service
  integrations-service:
    build:
      context: ./touriquest-backend/services/integrations-service
      dockerfile: Dockerfile.dev
    container_name: touriquest-integrations-service-dev
    ports:
      - "8013:8013"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/touriquest_dev
      - REDIS_URL=redis://redis:6379/13
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
      - GOOGLE_MAPS_API_KEY=your_google_maps_api_key
      - WEATHER_API_KEY=your_weather_api_key
      - AMADEUS_API_KEY=your_amadeus_api_key
      - AMADEUS_API_SECRET=your_amadeus_api_secret
      - LOG_LEVEL=DEBUG
      - DEBUG=true
    volumes:
      - ./touriquest-backend/services/integrations-service:/app
      - ./shared:/app/shared
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - touriquest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8013/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Service
  monitoring-service:
    build:
      context: ./touriquest-backend/services/monitoring-service
      dockerfile: Dockerfile.dev
    container_name: touriquest-monitoring-service-dev
    ports:
      - "8014:8014"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/touriquest_dev
      - REDIS_URL=redis://redis:6379/14
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
      - PROMETHEUS_URL=http://prometheus:9090
      - LOG_LEVEL=DEBUG
      - DEBUG=true
    volumes:
      - ./touriquest-backend/services/monitoring-service:/app
      - ./shared:/app/shared
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      prometheus:
        condition: service_started
    networks:
      - touriquest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8014/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Recommendation Service
  recommendation-service:
    build:
      context: ./touriquest-backend/services/recommendation-service
      dockerfile: Dockerfile.dev
    container_name: touriquest-recommendation-service-dev
    ports:
      - "8015:8015"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/touriquest_dev
      - REDIS_URL=redis://redis:6379/15
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
      - LOG_LEVEL=DEBUG
      - DEBUG=true
    volumes:
      - ./touriquest-backend/services/recommendation-service:/app
      - ./shared:/app/shared
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - touriquest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8015/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # FRONTEND (for full-stack development)
  # =============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: touriquest-frontend-dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
      - REACT_APP_SENTRY_DSN=your_frontend_sentry_dsn
      - CHOKIDAR_USEPOLLING=true
      - GENERATE_SOURCEMAP=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - touriquest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

# =============================================================================
# NETWORKS & VOLUMES
# =============================================================================
networks:
  touriquest-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local